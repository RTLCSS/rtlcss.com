{"version":3,"sources":["vs/languages/markdown/common/fake","vs/languages/markdown/common/markdown.js","vs/languages/markdown/common/file:/C:/Alex/src/vscode/src/vs/languages/markdown/common/markdown.ts"],"names":["__m","__M","deps","result","i","len","length","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","__decorate","decorators","target","key","desc","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","define","require","exports","Compile","Modes","html_1","modeService_1","instantiation_1","thread_1","configuration_1","editorWorkerService_1","abstractMode_1","monarchLexer_1","languageConfigurationRegistry_1","async_1","TOKEN_HEADER_LEAD","TOKEN_HEADER","TOKEN_EXT_HEADER","TOKEN_SEPARATOR","TOKEN_QUOTE","TOKEN_LIST","TOKEN_BLOCK","TOKEN_BLOCK_CODE","language","defaultToken","tokenPostfix","control","noncontrol","escapes","jsescapes","empty","tokenizer","root","token","next","nextEmbedded","include","codeblock","codeblockgh","switchTo","codeblockghend","linecontent","html","htmlTokenTypes","getTag","cases","@empty","@default","bracket","comment","tag","ATTRIB_NAME","DELIM_ASSIGN","ATTRIB_VALUE","$S2==style","$S2==script","$S3","embedded","$1==$S2","string","$#==$S2","MarkdownMode","_super","descriptor","instantiationService","threadService","modeService","editorWorkerService","configurationService","call","id","lexer","compile","tokenizationSupport","createTokenizationSupport","LanguageConfigurationRegistry","register","getId","LANG_CONFIG","SuggestRegistry","triggerCharacters","shouldAutotriggerSuggest","provideCompletionItems","model","position","wireCancellationToken","textualSuggest","uri","comments","blockComment","brackets","autoClosingPairs","IInstantiationService","IThreadService","IModeService","IEditorWorkerService","IConfigurationService","AbstractMode"],"mappings":"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","file":"vs/languages/markdown/common/markdown.js","sourcesContent":["}).call(this);","/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.4.2(1ebfb1b687c4345ac9c6da39051431a46c120a65)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n(function() {\nvar __m = [\"vs/platform/instantiation/common/instantiation\",\"vs/languages/markdown/common/markdown\",\"exports\",\"vs/editor/common/modes/monarch/monarchCompile\",\"vs/editor/common/modes\",\"vs/languages/html/common/html\",\"vs/editor/common/services/modeService\",\"require\",\"vs/platform/thread/common/thread\",\"vs/platform/configuration/common/configuration\",\"vs/editor/common/services/editorWorkerService\",\"vs/editor/common/modes/abstractMode\",\"vs/editor/common/modes/monarch/monarchLexer\",\"vs/editor/common/modes/languageConfigurationRegistry\",\"vs/base/common/async\"];\nvar __M = function(deps) {\n  var result = [];\n  for (var i = 0, len = deps.length; i < len; i++) {\n    result[i] = __m[deps[i]];\n  }\n  return result;\n};\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine(__m[1], __M([7,2,3,4,5,6,0,8,9,10,11,12,13,14]), function (require, exports, Compile, Modes, html_1, modeService_1, instantiation_1, thread_1, configuration_1, editorWorkerService_1, abstractMode_1, monarchLexer_1, languageConfigurationRegistry_1, async_1) {\n    /*---------------------------------------------------------------------------------------------\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\n     *--------------------------------------------------------------------------------------------*/\n    'use strict';\n    exports.TOKEN_HEADER_LEAD = 'entity.name.tag';\n    exports.TOKEN_HEADER = 'entity.name.tag';\n    exports.TOKEN_EXT_HEADER = 'entity.other.attribute-name';\n    exports.TOKEN_SEPARATOR = 'meta.separator';\n    exports.TOKEN_QUOTE = 'comment';\n    exports.TOKEN_LIST = 'keyword';\n    exports.TOKEN_BLOCK = 'string';\n    exports.TOKEN_BLOCK_CODE = 'variable.source';\n    exports.language = {\n        defaultToken: '',\n        tokenPostfix: '.md',\n        // escape codes\n        control: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n        noncontrol: /[^\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n        escapes: /\\\\(?:@control)/,\n        // escape codes for javascript/CSS strings\n        jsescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n        // non matched elements\n        empty: [\n            'area', 'base', 'basefont', 'br', 'col', 'frame',\n            'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param'\n        ],\n        tokenizer: {\n            root: [\n                // headers (with #)\n                [/^(\\s{0,3})(#+)((?:[^\\\\#]|@escapes)+)((?:#+)?)/, ['white', exports.TOKEN_HEADER_LEAD, exports.TOKEN_HEADER, exports.TOKEN_HEADER]],\n                // headers (with =)\n                [/^\\s*(=+|\\-+)\\s*$/, exports.TOKEN_EXT_HEADER],\n                // headers (with ***)\n                [/^\\s*((\\*[ ]?)+)\\s*$/, exports.TOKEN_SEPARATOR],\n                // quote\n                [/^\\s*>+/, exports.TOKEN_QUOTE],\n                // list (starting with * or number)\n                [/^\\s*([\\*\\-+:]|\\d+\\.)\\s/, exports.TOKEN_LIST],\n                // code block (4 spaces indent)\n                [/^(\\t|[ ]{4})[^ ].*$/, exports.TOKEN_BLOCK],\n                // code block (3 tilde)\n                [/^\\s*~{3}\\s*((?:\\w|[\\/\\-#])+)?\\s*$/, { token: exports.TOKEN_BLOCK, next: '@codeblock' }],\n                // github style code blocks (with backticks and language)\n                [/^\\s*```\\s*((?:\\w|[\\/\\-#])+)\\s*$/, { token: exports.TOKEN_BLOCK, next: '@codeblockgh', nextEmbedded: '$1' }],\n                // github style code blocks (with backticks but no language)\n                [/^\\s*`{3}\\s*$/, { token: exports.TOKEN_BLOCK, next: '@codeblock' }],\n                // markup within lines\n                { include: '@linecontent' },\n            ],\n            codeblock: [\n                [/^\\s*~{3}\\s*$/, { token: exports.TOKEN_BLOCK, next: '@pop' }],\n                [/^\\s*`{3}\\s*$/, { token: exports.TOKEN_BLOCK, next: '@pop' }],\n                [/.*$/, exports.TOKEN_BLOCK_CODE],\n            ],\n            // github style code blocks\n            codeblockgh: [\n                [/```\\s*$/, { token: '@rematch', switchTo: '@codeblockghend', nextEmbedded: '@pop' }],\n                [/[^`]*$/, exports.TOKEN_BLOCK_CODE],\n            ],\n            codeblockghend: [\n                [/\\s*```/, { token: exports.TOKEN_BLOCK_CODE, next: '@pop' }],\n                [/./, '@rematch', '@pop'],\n            ],\n            linecontent: [\n                // escapes\n                [/&\\w+;/, 'string.escape'],\n                [/@escapes/, 'escape'],\n                // various markup\n                [/\\b__([^\\\\_]|@escapes|_(?!_))+__\\b/, 'strong'],\n                [/\\*\\*([^\\\\*]|@escapes|\\*(?!\\*))+\\*\\*/, 'strong'],\n                [/\\b_[^_]+_\\b/, 'emphasis'],\n                [/\\*([^\\\\*]|@escapes)+\\*/, 'emphasis'],\n                [/`([^\\\\`]|@escapes)+`/, 'variable'],\n                // links\n                [/\\{[^}]+\\}/, 'string.target'],\n                [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\]\\([^\\)]+\\))/, ['string.link', '', 'string.link']],\n                [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\])/, 'string.link'],\n                // or html\n                { include: 'html' },\n            ],\n            // Note: it is tempting to rather switch to the real HTML mode instead of building our own here\n            // but currently there is a limitation in Monarch that prevents us from doing it: The opening\n            // '<' would start the HTML mode, however there is no way to jump 1 character back to let the\n            // HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,\n            // we cannot correctly tokenize it in that mode yet.\n            html: [\n                // html tags\n                [/<(\\w+)\\/>/, html_1.htmlTokenTypes.getTag('$1')],\n                [/<(\\w+)/, {\n                        cases: {\n                            '@empty': { token: html_1.htmlTokenTypes.getTag('$1'), next: '@tag.$1' },\n                            '@default': { token: html_1.htmlTokenTypes.getTag('$1'), bracket: '@open', next: '@tag.$1' }\n                        }\n                    }],\n                [/<\\/(\\w+)\\s*>/, { token: html_1.htmlTokenTypes.getTag('$1'), bracket: '@close' }],\n                [/<!--/, 'comment', '@comment']\n            ],\n            comment: [\n                [/[^<\\-]+/, 'comment.content'],\n                [/-->/, 'comment', '@pop'],\n                [/<!--/, 'comment.content.invalid'],\n                [/[<\\-]/, 'comment.content']\n            ],\n            // Almost full HTML tag matching, complete with embedded scripts & styles\n            tag: [\n                [/[ \\t\\r\\n]+/, 'white'],\n                [/(type)(\\s*=\\s*)(\")([^\"]+)(\")/, [html_1.htmlTokenTypes.ATTRIB_NAME, html_1.htmlTokenTypes.DELIM_ASSIGN, html_1.htmlTokenTypes.ATTRIB_VALUE,\n                        { token: html_1.htmlTokenTypes.ATTRIB_VALUE, switchTo: '@tag.$S2.$4' },\n                        html_1.htmlTokenTypes.ATTRIB_VALUE]],\n                [/(type)(\\s*=\\s*)(')([^']+)(')/, [html_1.htmlTokenTypes.ATTRIB_NAME, html_1.htmlTokenTypes.DELIM_ASSIGN, html_1.htmlTokenTypes.ATTRIB_VALUE,\n                        { token: html_1.htmlTokenTypes.ATTRIB_VALUE, switchTo: '@tag.$S2.$4' },\n                        html_1.htmlTokenTypes.ATTRIB_VALUE]],\n                [/(\\w+)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, [html_1.htmlTokenTypes.ATTRIB_NAME, html_1.htmlTokenTypes.DELIM_ASSIGN, html_1.htmlTokenTypes.ATTRIB_VALUE]],\n                [/\\w+/, html_1.htmlTokenTypes.ATTRIB_NAME],\n                [/\\/>/, html_1.htmlTokenTypes.getTag('$S2'), '@pop'],\n                [/>/, {\n                        cases: {\n                            '$S2==style': { token: html_1.htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: 'text/css' },\n                            '$S2==script': {\n                                cases: {\n                                    '$S3': { token: html_1.htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: '$S3' },\n                                    '@default': { token: html_1.htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: 'text/javascript' }\n                                }\n                            },\n                            '@default': { token: html_1.htmlTokenTypes.getTag('$S2'), next: '@pop' }\n                        }\n                    }],\n            ],\n            embedded: [\n                [/[^\"'<]+/, ''],\n                [/<\\/(\\w+)\\s*>/, {\n                        cases: {\n                            '$1==$S2': { token: '@rematch', next: '@pop', nextEmbedded: '@pop' },\n                            '@default': ''\n                        }\n                    }],\n                [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n                [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\n                [/\"/, 'string', '@string.\"'],\n                [/'/, 'string', '@string.\\''],\n                [/</, '']\n            ],\n            // scan embedded strings in javascript or css\n            string: [\n                [/[^\\\\\"']+/, 'string'],\n                [/@jsescapes/, 'string.escape'],\n                [/\\\\./, 'string.escape.invalid'],\n                [/[\"']/, {\n                        cases: {\n                            '$#==$S2': { token: 'string', next: '@pop' },\n                            '@default': 'string'\n                        }\n                    }]\n            ]\n        }\n    };\n    var MarkdownMode = (function (_super) {\n        __extends(MarkdownMode, _super);\n        function MarkdownMode(descriptor, instantiationService, threadService, modeService, editorWorkerService, configurationService) {\n            _super.call(this, descriptor.id);\n            var lexer = Compile.compile(descriptor.id, exports.language);\n            this.tokenizationSupport = monarchLexer_1.createTokenizationSupport(modeService, this, lexer);\n            languageConfigurationRegistry_1.LanguageConfigurationRegistry.register(this.getId(), MarkdownMode.LANG_CONFIG);\n            Modes.SuggestRegistry.register(this.getId(), {\n                triggerCharacters: [],\n                shouldAutotriggerSuggest: false,\n                provideCompletionItems: function (model, position, token) {\n                    return async_1.wireCancellationToken(token, editorWorkerService.textualSuggest(model.uri, position));\n                }\n            }, true);\n        }\n        MarkdownMode.LANG_CONFIG = {\n            comments: {\n                blockComment: ['<!--', '-->',]\n            },\n            brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],\n            autoClosingPairs: []\n        };\n        MarkdownMode = __decorate([\n            __param(1, instantiation_1.IInstantiationService),\n            __param(2, thread_1.IThreadService),\n            __param(3, modeService_1.IModeService),\n            __param(4, editorWorkerService_1.IEditorWorkerService),\n            __param(5, configuration_1.IConfigurationService)\n        ], MarkdownMode);\n        return MarkdownMode;\n    }(abstractMode_1.AbstractMode));\n    exports.MarkdownMode = MarkdownMode;\n});\n\n}).call(this);\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Types = require('vs/editor/common/modes/monarch/monarchTypes');\nimport Compile = require('vs/editor/common/modes/monarch/monarchCompile');\nimport Modes = require('vs/editor/common/modes');\nimport {htmlTokenTypes} from 'vs/languages/html/common/html';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IThreadService} from 'vs/platform/thread/common/thread';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {IEditorWorkerService} from 'vs/editor/common/services/editorWorkerService';\nimport {AbstractMode} from 'vs/editor/common/modes/abstractMode';\nimport {createTokenizationSupport} from 'vs/editor/common/modes/monarch/monarchLexer';\nimport {LanguageConfigurationRegistry, LanguageConfiguration} from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport {wireCancellationToken} from 'vs/base/common/async';\n\nexport const TOKEN_HEADER_LEAD = 'entity.name.tag';\nexport const TOKEN_HEADER = 'entity.name.tag';\nexport const TOKEN_EXT_HEADER = 'entity.other.attribute-name';\nexport const TOKEN_SEPARATOR = 'meta.separator';\nexport const TOKEN_QUOTE = 'comment';\nexport const TOKEN_LIST = 'keyword';\nexport const TOKEN_BLOCK = 'string';\nexport const TOKEN_BLOCK_CODE = 'variable.source';\n\nexport const language =\n\t<Types.IMonarchLanguage>{\n\t\tdefaultToken: '',\n\t\ttokenPostfix: '.md',\n\n\t\t// escape codes\n\t\tcontrol: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n\t\tnoncontrol: /[^\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n\t\tescapes: /\\\\(?:@control)/,\n\n\t\t// escape codes for javascript/CSS strings\n\t\tjsescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n\n\t\t// non matched elements\n\t\tempty: [\n\t\t\t'area', 'base', 'basefont', 'br', 'col', 'frame',\n\t\t\t'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param'\n\t\t],\n\n\t\ttokenizer: {\n\t\t\troot: [\n\n\t\t\t\t// headers (with #)\n\t\t\t\t[/^(\\s{0,3})(#+)((?:[^\\\\#]|@escapes)+)((?:#+)?)/, ['white', TOKEN_HEADER_LEAD, TOKEN_HEADER, TOKEN_HEADER]],\n\n\t\t\t\t// headers (with =)\n\t\t\t\t[/^\\s*(=+|\\-+)\\s*$/, TOKEN_EXT_HEADER],\n\n\t\t\t\t// headers (with ***)\n\t\t\t\t[/^\\s*((\\*[ ]?)+)\\s*$/, TOKEN_SEPARATOR],\n\n\t\t\t\t// quote\n\t\t\t\t[/^\\s*>+/, TOKEN_QUOTE],\n\n\t\t\t\t// list (starting with * or number)\n\t\t\t\t[/^\\s*([\\*\\-+:]|\\d+\\.)\\s/, TOKEN_LIST],\n\n\t\t\t\t// code block (4 spaces indent)\n\t\t\t\t[/^(\\t|[ ]{4})[^ ].*$/, TOKEN_BLOCK],\n\n\t\t\t\t// code block (3 tilde)\n\t\t\t\t[/^\\s*~{3}\\s*((?:\\w|[\\/\\-#])+)?\\s*$/, { token: TOKEN_BLOCK, next: '@codeblock' }],\n\n\t\t\t\t// github style code blocks (with backticks and language)\n\t\t\t\t[/^\\s*```\\s*((?:\\w|[\\/\\-#])+)\\s*$/, { token: TOKEN_BLOCK, next: '@codeblockgh', nextEmbedded: '$1' }],\n\n\t\t\t\t// github style code blocks (with backticks but no language)\n\t\t\t\t[/^\\s*`{3}\\s*$/, { token: TOKEN_BLOCK, next: '@codeblock' }],\n\n\t\t\t\t// markup within lines\n\t\t\t\t{ include: '@linecontent' },\n\t\t\t],\n\n\t\t\tcodeblock: [\n\t\t\t\t[/^\\s*~{3}\\s*$/, { token: TOKEN_BLOCK, next: '@pop' }],\n\t\t\t\t[/^\\s*`{3}\\s*$/, { token: TOKEN_BLOCK, next: '@pop' }],\n\t\t\t\t[/.*$/, TOKEN_BLOCK_CODE],\n\t\t\t],\n\n\t\t\t// github style code blocks\n\t\t\tcodeblockgh: [\n\t\t\t\t[/```\\s*$/, { token: '@rematch', switchTo: '@codeblockghend', nextEmbedded: '@pop' }],\n\t\t\t\t[/[^`]*$/, TOKEN_BLOCK_CODE],\n\t\t\t],\n\n\t\t\tcodeblockghend: [\n\t\t\t\t[/\\s*```/, { token: TOKEN_BLOCK_CODE, next: '@pop' }],\n\t\t\t\t[/./, '@rematch', '@pop'],\n\t\t\t],\n\n\t\t\tlinecontent: [\n\n\t\t\t\t// escapes\n\t\t\t\t[/&\\w+;/, 'string.escape'],\n\t\t\t\t[/@escapes/, 'escape'],\n\n\t\t\t\t// various markup\n\t\t\t\t[/\\b__([^\\\\_]|@escapes|_(?!_))+__\\b/, 'strong'],\n\t\t\t\t[/\\*\\*([^\\\\*]|@escapes|\\*(?!\\*))+\\*\\*/, 'strong'],\n\t\t\t\t[/\\b_[^_]+_\\b/, 'emphasis'],\n\t\t\t\t[/\\*([^\\\\*]|@escapes)+\\*/, 'emphasis'],\n\t\t\t\t[/`([^\\\\`]|@escapes)+`/, 'variable'],\n\n\t\t\t\t// links\n\t\t\t\t[/\\{[^}]+\\}/, 'string.target'],\n\t\t\t\t[/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\]\\([^\\)]+\\))/, ['string.link', '', 'string.link']],\n\t\t\t\t[/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\])/, 'string.link'],\n\n\t\t\t\t// or html\n\t\t\t\t{ include: 'html' },\n\t\t\t],\n\n\t\t\t// Note: it is tempting to rather switch to the real HTML mode instead of building our own here\n\t\t\t// but currently there is a limitation in Monarch that prevents us from doing it: The opening\n\t\t\t// '<' would start the HTML mode, however there is no way to jump 1 character back to let the\n\t\t\t// HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,\n\t\t\t// we cannot correctly tokenize it in that mode yet.\n\t\t\thtml: [\n\t\t\t\t// html tags\n\t\t\t\t[/<(\\w+)\\/>/, htmlTokenTypes.getTag('$1')],\n\t\t\t\t[/<(\\w+)/, {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@empty': { token: htmlTokenTypes.getTag('$1'), next: '@tag.$1' },\n\t\t\t\t\t\t'@default': { token: htmlTokenTypes.getTag('$1'), bracket: '@open', next: '@tag.$1' }\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\t[/<\\/(\\w+)\\s*>/, { token: htmlTokenTypes.getTag('$1'), bracket: '@close' }],\n\n\t\t\t\t[/<!--/, 'comment', '@comment']\n\t\t\t],\n\n\t\t\tcomment: [\n\t\t\t\t[/[^<\\-]+/, 'comment.content'],\n\t\t\t\t[/-->/, 'comment', '@pop'],\n\t\t\t\t[/<!--/, 'comment.content.invalid'],\n\t\t\t\t[/[<\\-]/, 'comment.content']\n\t\t\t],\n\n\t\t\t// Almost full HTML tag matching, complete with embedded scripts & styles\n\t\t\ttag: [\n\t\t\t\t[/[ \\t\\r\\n]+/, 'white'],\n\t\t\t\t[/(type)(\\s*=\\s*)(\")([^\"]+)(\")/, [htmlTokenTypes.ATTRIB_NAME, htmlTokenTypes.DELIM_ASSIGN, htmlTokenTypes.ATTRIB_VALUE,\n\t\t\t\t\t{ token: htmlTokenTypes.ATTRIB_VALUE, switchTo: '@tag.$S2.$4' },\n\t\t\t\t\thtmlTokenTypes.ATTRIB_VALUE]],\n\t\t\t\t[/(type)(\\s*=\\s*)(')([^']+)(')/, [htmlTokenTypes.ATTRIB_NAME, htmlTokenTypes.DELIM_ASSIGN, htmlTokenTypes.ATTRIB_VALUE,\n\t\t\t\t\t{ token: htmlTokenTypes.ATTRIB_VALUE, switchTo: '@tag.$S2.$4' },\n\t\t\t\t\thtmlTokenTypes.ATTRIB_VALUE]],\n\t\t\t\t[/(\\w+)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, [htmlTokenTypes.ATTRIB_NAME, htmlTokenTypes.DELIM_ASSIGN, htmlTokenTypes.ATTRIB_VALUE]],\n\t\t\t\t[/\\w+/, htmlTokenTypes.ATTRIB_NAME],\n\t\t\t\t[/\\/>/, htmlTokenTypes.getTag('$S2'), '@pop'],\n\t\t\t\t[/>/, {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$S2==style': { token: htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: 'text/css' },\n\t\t\t\t\t\t'$S2==script': {\n\t\t\t\t\t\t\tcases: {\n\t\t\t\t\t\t\t\t'$S3': { token: htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: '$S3' },\n\t\t\t\t\t\t\t\t'@default': { token: htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: 'text/javascript' }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@default': { token: htmlTokenTypes.getTag('$S2'), next: '@pop' }\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t],\n\n\t\t\tembedded: [\n\t\t\t\t[/[^\"'<]+/, ''],\n\t\t\t\t[/<\\/(\\w+)\\s*>/, {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S2': { token: '@rematch', next: '@pop', nextEmbedded: '@pop' },\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],  // non-teminated string\n\t\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],  // non-teminated string\n\t\t\t\t[/\"/, 'string', '@string.\"'],\n\t\t\t\t[/'/, 'string', '@string.\\''],\n\t\t\t\t[/</, '']\n\t\t\t],\n\n\t\t\t// scan embedded strings in javascript or css\n\t\t\tstring: [\n\t\t\t\t[/[^\\\\\"']+/, 'string'],\n\t\t\t\t[/@jsescapes/, 'string.escape'],\n\t\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t\t[/[\"']/, {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S2': { token: 'string', next: '@pop' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t]\n\t\t}\n\t};\n\nexport class MarkdownMode extends AbstractMode {\n\n\tpublic static LANG_CONFIG: LanguageConfiguration = {\n\t\tcomments: {\n\t\t\tblockComment: ['<!--', '-->',]\n\t\t},\n\t\tbrackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],\n\t\tautoClosingPairs: []\n\t};\n\n\tpublic tokenizationSupport: Modes.ITokenizationSupport;\n\n\tconstructor(\n\t\tdescriptor: Modes.IModeDescriptor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IThreadService threadService: IThreadService,\n\t\t@IModeService modeService: IModeService,\n\t\t@IEditorWorkerService editorWorkerService: IEditorWorkerService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper(descriptor.id);\n\t\tlet lexer = Compile.compile(descriptor.id, language);\n\n\t\tthis.tokenizationSupport = createTokenizationSupport(modeService, this, lexer);\n\n\t\tLanguageConfigurationRegistry.register(this.getId(), MarkdownMode.LANG_CONFIG);\n\n\t\tModes.SuggestRegistry.register(this.getId(), {\n\t\t\ttriggerCharacters: [],\n\t\t\tshouldAutotriggerSuggest: false,\n\t\t\tprovideCompletionItems: (model, position, token) => {\n\t\t\t\treturn wireCancellationToken(token, editorWorkerService.textualSuggest(model.uri, position));\n\t\t\t}\n\t\t}, true);\n\t}\n}"]}