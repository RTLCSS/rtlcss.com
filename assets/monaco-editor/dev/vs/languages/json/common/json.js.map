{"version":3,"sources":["fake","file:///C:/Alex/src/vscode/src/vs/languages/json/common/features/jsonTokenTypes.ts","file:///C:/Alex/src/vscode/src/vs/base/common/json.ts","file:///C:/Alex/src/vscode/src/vs/languages/json/common/features/tokenization.ts","file:///C:/Alex/src/vscode/src/vs/languages/json/common/json.ts"],"names":[],"mappings":"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","file":"vs/languages/json/common/json.js","sourcesContent":["}).call(this);","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport const TOKEN_DELIM_OBJECT = 'punctuation.bracket.json';\nexport const TOKEN_DELIM_ARRAY = 'punctuation.array.json';\nexport const TOKEN_DELIM_COLON = 'punctuation.colon.json';\nexport const TOKEN_DELIM_COMMA = 'punctuation.comma.json';\nexport const TOKEN_VALUE_BOOLEAN= 'support.property-value.keyword.json';\nexport const TOKEN_VALUE_NULL= 'support.property-value.constant.other.json';\nexport const TOKEN_VALUE_STRING = 'support.property-value.string.value.json';\nexport const TOKEN_VALUE_NUMBER = 'support.property-value.constant.numeric.json';\nexport const TOKEN_PROPERTY_NAME = 'support.type.property-name.json';\nexport const TOKEN_COMMENT_BLOCK = 'comment.block.json';\nexport const TOKEN_COMMENT_LINE = 'comment.line.json';","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {localize} from 'vs/nls';\n\nexport enum ScanError {\n\tNone,\n\tUnexpectedEndOfComment,\n\tUnexpectedEndOfString,\n\tUnexpectedEndOfNumber,\n\tInvalidUnicode,\n\tInvalidEscapeCharacter\n}\n\nexport enum SyntaxKind {\n\tUnknown = 0,\n\tOpenBraceToken,\n\tCloseBraceToken,\n\tOpenBracketToken,\n\tCloseBracketToken,\n\tCommaToken,\n\tColonToken,\n\tNullKeyword,\n\tTrueKeyword,\n\tFalseKeyword,\n\tStringLiteral,\n\tNumericLiteral,\n\tLineCommentTrivia,\n\tBlockCommentTrivia,\n\tLineBreakTrivia,\n\tTrivia,\n\tEOF\n}\n\n/**\n * The scanner object, representing a JSON scanner at a position in the input string.\n */\nexport interface JSONScanner {\n\t/**\n\t * Sets the scan position to a new offset. A call to 'scan' is needed to get the first token.\n\t */\n\tsetPosition(pos: number);\n\t/**\n\t * Read the next token. Returns the tolen code.\n\t */\n\tscan(): SyntaxKind;\n\t/**\n\t * Returns the current scan position, which is after the last read token.\n\t */\n\tgetPosition(): number;\n\t/**\n\t * Returns the last read token.\n\t */\n\tgetToken(): SyntaxKind;\n\t/**\n\t * Returns the last read token value. The value for strings is the decoded string content. For numbers its of type number, for boolean it's true or false.\n\t */\n\tgetTokenValue(): string;\n\t/**\n\t * The start offset of the last read token.\n\t */\n\tgetTokenOffset(): number;\n\t/**\n\t * The length of the last read token.\n\t */\n\tgetTokenLength(): number;\n\t/**\n\t * An error code of the last scan.\n\t */\n\tgetTokenError(): ScanError;\n}\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text:string, ignoreTrivia:boolean = false):JSONScanner {\n\n\tlet pos = 0,\n\t\tlen = text.length,\n\t\tvalue:string = '',\n\t\ttokenOffset = 0,\n\t\ttoken:SyntaxKind = SyntaxKind.Unknown,\n\t\tscanError:ScanError = ScanError.None;\n\n\tfunction scanHexDigits(count: number, exact?: boolean): number {\n\t\tlet digits = 0;\n\t\tlet value = 0;\n\t\twhile (digits < count || !exact) {\n\t\t\tlet ch = text.charCodeAt(pos);\n\t\t\tif (ch >= CharacterCodes._0 && ch <= CharacterCodes._9) {\n\t\t\t\tvalue = value * 16 + ch - CharacterCodes._0;\n\t\t\t}\n\t\t\telse if (ch >= CharacterCodes.A && ch <= CharacterCodes.F) {\n\t\t\t\tvalue = value * 16 + ch - CharacterCodes.A + 10;\n\t\t\t}\n\t\t\telse if (ch >= CharacterCodes.a && ch <= CharacterCodes.f) {\n\t\t\t\tvalue = value * 16 + ch - CharacterCodes.a + 10;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpos++;\n\t\t\tdigits++;\n\t\t}\n\t\tif (digits < count) {\n\t\t\tvalue = -1;\n\t\t}\n\t\treturn value;\n\t}\n\n\tfunction setPosition(newPosition: number) {\n\t\tpos = newPosition;\n\t\tvalue = '';\n\t\ttokenOffset = 0;\n\t\ttoken = SyntaxKind.Unknown;\n\t\tscanError = ScanError.None;\n\t}\n\n\tfunction scanNumber(): string {\n\t\tlet start = pos;\n\t\tif (text.charCodeAt(pos) === CharacterCodes._0) {\n\t\t\tpos++;\n\t\t} else {\n\t\t\tpos++;\n\t\t\twhile (pos < text.length && isDigit(text.charCodeAt(pos))) {\n\t\t\t\tpos++;\n\t\t\t}\n\t\t}\n\t\tif (pos < text.length && text.charCodeAt(pos) === CharacterCodes.dot) {\n\t\t\tpos++;\n\t\t\tif (pos < text.length && isDigit(text.charCodeAt(pos))) {\n\t\t\t\tpos++;\n\t\t\t\twhile (pos < text.length && isDigit(text.charCodeAt(pos))) {\n\t\t\t\t\tpos++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tscanError = ScanError.UnexpectedEndOfNumber;\n\t\t\t\treturn text.substring(start, pos);\n\t\t\t}\n\t\t}\n\t\tlet end = pos;\n\t\tif (pos < text.length && (text.charCodeAt(pos) === CharacterCodes.E || text.charCodeAt(pos) === CharacterCodes.e)) {\n\t\t\tpos++;\n\t\t\tif (pos < text.length && text.charCodeAt(pos) === CharacterCodes.plus || text.charCodeAt(pos) === CharacterCodes.minus) {\n\t\t\t\tpos++;\n\t\t\t}\n\t\t\tif (pos < text.length && isDigit(text.charCodeAt(pos))) {\n\t\t\t\tpos++;\n\t\t\t\twhile (pos < text.length && isDigit(text.charCodeAt(pos))) {\n\t\t\t\t\tpos++;\n\t\t\t\t}\n\t\t\t\tend = pos;\n\t\t\t} else {\n\t\t\t\tscanError = ScanError.UnexpectedEndOfNumber;\n\t\t\t}\n\t\t}\n\t\treturn text.substring(start, end);\n\t}\n\n\tfunction scanString(): string {\n\n\t\tlet result = '',\n\t\t\tstart = pos;\n\n\t\twhile (true) {\n\t\t\tif (pos >= len) {\n\t\t\t\tresult += text.substring(start, pos);\n\t\t\t\tscanError = ScanError.UnexpectedEndOfString;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlet ch = text.charCodeAt(pos);\n\t\t\tif (ch === CharacterCodes.doubleQuote) {\n\t\t\t\tresult += text.substring(start, pos);\n\t\t\t\tpos++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (ch === CharacterCodes.backslash) {\n\t\t\t\tresult += text.substring(start, pos);\n\t\t\t\tpos++;\n\t\t\t\tif (pos >= len) {\n\t\t\t\t\tscanError = ScanError.UnexpectedEndOfString;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tch = text.charCodeAt(pos++);\n\t\t\t\tswitch (ch) {\n\t\t\t\t\tcase CharacterCodes.doubleQuote:\n\t\t\t\t\t\tresult += '\\\"';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharacterCodes.backslash:\n\t\t\t\t\t\tresult += '\\\\';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharacterCodes.slash:\n\t\t\t\t\t\tresult += '/';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharacterCodes.b:\n\t\t\t\t\t\tresult += '\\b';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharacterCodes.f:\n\t\t\t\t\t\tresult += '\\f';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharacterCodes.n:\n\t\t\t\t\t\tresult += '\\n';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharacterCodes.r:\n\t\t\t\t\t\tresult += '\\r';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharacterCodes.t:\n\t\t\t\t\t\tresult += '\\t';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharacterCodes.u:\n\t\t\t\t\t\tlet ch = scanHexDigits(4, true);\n\t\t\t\t\t\tif (ch >= 0) {\n\t\t\t\t\t\t\tresult += String.fromCharCode(ch);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tscanError = ScanError.InvalidUnicode;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tscanError = ScanError.InvalidEscapeCharacter;\n\t\t\t\t}\n\t\t\t\tstart = pos;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (isLineBreak(ch)) {\n\t\t\t\tresult += text.substring(start, pos);\n\t\t\t\tscanError = ScanError.UnexpectedEndOfString;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpos++;\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction scanNext():SyntaxKind {\n\n\t\tvalue = '';\n\t\tscanError = ScanError.None;\n\n\t\ttokenOffset = pos;\n\n\t\tif(pos >= len) {\n\t\t\t// at the end\n\t\t\ttokenOffset = len;\n\t\t\treturn token = SyntaxKind.EOF;\n\t\t}\n\n\t\tlet code = text.charCodeAt(pos);\n\t\t// trivia: whitespace\n\t\tif (isWhiteSpace(code)) {\n\t\t\tdo {\n\t\t\t\tpos++;\n\t\t\t\tvalue += String.fromCharCode(code);\n\t\t\t\tcode = text.charCodeAt(pos);\n\t\t\t} while (isWhiteSpace(code));\n\n\t\t\treturn token = SyntaxKind.Trivia;\n\t\t}\n\n\t\t// trivia: newlines\n\t\tif (isLineBreak(code)) {\n\t\t\tpos++;\n\t\t\tvalue += String.fromCharCode(code);\n\t\t\tif (code === CharacterCodes.carriageReturn && text.charCodeAt(pos) === CharacterCodes.lineFeed) {\n\t\t\t\tpos++;\n\t\t\t\tvalue += '\\n';\n\t\t\t}\n\t\t\treturn token = SyntaxKind.LineBreakTrivia;\n\t\t}\n\n\t\tswitch(code) {\n\t\t\t// tokens: []{}:,\n\t\t\tcase CharacterCodes.openBrace:\n\t\t\t\tpos++;\n\t\t\t\treturn token = SyntaxKind.OpenBraceToken;\n\t\t\tcase CharacterCodes.closeBrace:\n\t\t\t\tpos++;\n\t\t\t\treturn token = SyntaxKind.CloseBraceToken;\n\t\t\tcase CharacterCodes.openBracket:\n\t\t\t\tpos++;\n\t\t\t\treturn token = SyntaxKind.OpenBracketToken;\n\t\t\tcase CharacterCodes.closeBracket:\n\t\t\t\tpos++;\n\t\t\t\treturn token = SyntaxKind.CloseBracketToken;\n\t\t\tcase CharacterCodes.colon:\n\t\t\t\tpos++;\n\t\t\t\treturn token = SyntaxKind.ColonToken;\n\t\t\tcase CharacterCodes.comma:\n\t\t\t\tpos++;\n\t\t\t\treturn token = SyntaxKind.CommaToken;\n\n\t\t\t// strings\n\t\t\tcase CharacterCodes.doubleQuote:\n\t\t\t\tpos++;\n\t\t\t\tvalue = scanString();\n\t\t\t\treturn token = SyntaxKind.StringLiteral;\n\n\t\t\t// comments\n\t\t\tcase CharacterCodes.slash:\n\t\t\t\tlet start = pos - 1;\n\t\t\t\t// Single-line comment\n\t\t\t\tif (text.charCodeAt(pos + 1) === CharacterCodes.slash) {\n\t\t\t\t\tpos += 2;\n\n\t\t\t\t\twhile (pos < len) {\n\t\t\t\t\t\tif (isLineBreak(text.charCodeAt(pos))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpos++;\n\n\t\t\t\t\t}\n\t\t\t\t\tvalue = text.substring(start, pos);\n\t\t\t\t\treturn token = SyntaxKind.LineCommentTrivia;\n\t\t\t\t}\n\n\t\t\t\t// Multi-line comment\n\t\t\t\tif (text.charCodeAt(pos + 1) === CharacterCodes.asterisk) {\n\t\t\t\t\tpos += 2;\n\n\t\t\t\t\tlet safeLength = len - 1; // For lookahead.\n\t\t\t\t\tlet commentClosed = false;\n\t\t\t\t\twhile (pos < safeLength) {\n\t\t\t\t\t\tlet ch = text.charCodeAt(pos);\n\n\t\t\t\t\t\tif (ch === CharacterCodes.asterisk && text.charCodeAt(pos + 1) === CharacterCodes.slash) {\n\t\t\t\t\t\t\tpos += 2;\n\t\t\t\t\t\t\tcommentClosed = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!commentClosed) {\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t\tscanError = ScanError.UnexpectedEndOfComment;\n\t\t\t\t\t}\n\n\t\t\t\t\tvalue = text.substring(start, pos);\n\t\t\t\t\treturn token = SyntaxKind.BlockCommentTrivia;\n\t\t\t\t}\n\t\t\t\t// just a single slash\n\t\t\t\tvalue += String.fromCharCode(code);\n\t\t\t\tpos++;\n\t\t\t\treturn token = SyntaxKind.Unknown;\n\n\t\t\t// numbers\n\t\t\tcase CharacterCodes.minus:\n\t\t\t\tvalue += String.fromCharCode(code);\n\t\t\t\tpos++;\n\t\t\t\tif (pos === len || !isDigit(text.charCodeAt(pos))) {\n\t\t\t\t\treturn token = SyntaxKind.Unknown;\n\t\t\t\t}\n\t\t\t\t// found a minus, followed by a number so\n\t\t\t\t// we fall through to proceed with scanning\n\t\t\t\t// numbers\n\t\t\tcase CharacterCodes._0:\n\t\t\tcase CharacterCodes._1:\n\t\t\tcase CharacterCodes._2:\n\t\t\tcase CharacterCodes._3:\n\t\t\tcase CharacterCodes._4:\n\t\t\tcase CharacterCodes._5:\n\t\t\tcase CharacterCodes._6:\n\t\t\tcase CharacterCodes._7:\n\t\t\tcase CharacterCodes._8:\n\t\t\tcase CharacterCodes._9:\n\t\t\t\tvalue += scanNumber();\n\t\t\t\treturn token = SyntaxKind.NumericLiteral;\n\t\t\t// literals and unknown symbols\n\t\t\tdefault:\n\t\t\t\t// is a literal? Read the full word.\n\t\t\t\twhile (pos < len && isUnknownContentCharacter(code)) {\n\t\t\t\t\tpos++;\n\t\t\t\t\tcode = text.charCodeAt(pos);\n\t\t\t\t}\n\t\t\t\tif (tokenOffset !== pos) {\n\t\t\t\t\tvalue = text.substring(tokenOffset, pos);\n\t\t\t\t\t// keywords: true, false, null\n\t\t\t\t\tswitch (value) {\n\t\t\t\t\t\tcase 'true': return token = SyntaxKind.TrueKeyword;\n\t\t\t\t\t\tcase 'false': return token = SyntaxKind.FalseKeyword;\n\t\t\t\t\t\tcase 'null': return token = SyntaxKind.NullKeyword;\n\t\t\t\t\t}\n\t\t\t\t\treturn token = SyntaxKind.Unknown;\n\t\t\t\t}\n\t\t\t\t// some\n\t\t\t\tvalue += String.fromCharCode(code);\n\t\t\t\tpos++;\n\t\t\t\treturn token = SyntaxKind.Unknown;\n\t\t}\n\t}\n\n\tfunction isUnknownContentCharacter(code: CharacterCodes) {\n\t\tif (isWhiteSpace(code) || isLineBreak(code)) {\n\t\t\treturn false;\n\t\t}\n\t\tswitch (code) {\n\t\t\tcase CharacterCodes.closeBrace:\n\t\t\tcase CharacterCodes.closeBracket:\n\t\t\tcase CharacterCodes.openBrace:\n\t\t\tcase CharacterCodes.openBracket:\n\t\t\tcase CharacterCodes.doubleQuote:\n\t\t\tcase CharacterCodes.colon:\n\t\t\tcase CharacterCodes.comma:\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\n\tfunction scanNextNonTrivia():SyntaxKind {\n\t\tlet result : SyntaxKind;\n\t\tdo {\n\t\t\tresult = scanNext();\n\t\t} while (result >= SyntaxKind.LineCommentTrivia && result <= SyntaxKind.Trivia);\n\t\treturn result;\n\t}\n\n\treturn {\n\t\tsetPosition: setPosition,\n\t\tgetPosition: () => pos,\n\t\tscan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n\t\tgetToken: () => token,\n\t\tgetTokenValue: () => value,\n\t\tgetTokenOffset: () => tokenOffset,\n\t\tgetTokenLength: () => pos - tokenOffset,\n\t\tgetTokenError: () => scanError\n\t};\n}\n\nfunction isWhiteSpace(ch: number): boolean {\n\treturn ch === CharacterCodes.space || ch === CharacterCodes.tab || ch === CharacterCodes.verticalTab || ch === CharacterCodes.formFeed ||\n\t\tch === CharacterCodes.nonBreakingSpace || ch === CharacterCodes.ogham || ch >= CharacterCodes.enQuad && ch <= CharacterCodes.zeroWidthSpace ||\n\t\tch === CharacterCodes.narrowNoBreakSpace || ch === CharacterCodes.mathematicalSpace || ch === CharacterCodes.ideographicSpace || ch === CharacterCodes.byteOrderMark;\n}\n\nfunction isLineBreak(ch: number): boolean {\n\treturn ch === CharacterCodes.lineFeed || ch === CharacterCodes.carriageReturn || ch === CharacterCodes.lineSeparator || ch === CharacterCodes.paragraphSeparator;\n}\n\nfunction isDigit(ch: number): boolean {\n\treturn ch >= CharacterCodes._0 && ch <= CharacterCodes._9;\n}\n\nenum CharacterCodes {\n\tnullCharacter = 0,\n\tmaxAsciiCharacter = 0x7F,\n\n\tlineFeed = 0x0A,              // \\n\n\tcarriageReturn = 0x0D,        // \\r\n\tlineSeparator = 0x2028,\n\tparagraphSeparator = 0x2029,\n\n\t// REVIEW: do we need to support this?  The scanner doesn't, but our IText does.  This seems\n\t// like an odd disparity?  (Or maybe it's completely fine for them to be different).\n\tnextLine = 0x0085,\n\n\t// Unicode 3.0 space characters\n\tspace = 0x0020,   // \" \"\n\tnonBreakingSpace = 0x00A0,   //\n\tenQuad = 0x2000,\n\temQuad = 0x2001,\n\tenSpace = 0x2002,\n\temSpace = 0x2003,\n\tthreePerEmSpace = 0x2004,\n\tfourPerEmSpace = 0x2005,\n\tsixPerEmSpace = 0x2006,\n\tfigureSpace = 0x2007,\n\tpunctuationSpace = 0x2008,\n\tthinSpace = 0x2009,\n\thairSpace = 0x200A,\n\tzeroWidthSpace = 0x200B,\n\tnarrowNoBreakSpace = 0x202F,\n\tideographicSpace = 0x3000,\n\tmathematicalSpace = 0x205F,\n\togham = 0x1680,\n\n\t_ = 0x5F,\n\t$ = 0x24,\n\n\t_0 = 0x30,\n\t_1 = 0x31,\n\t_2 = 0x32,\n\t_3 = 0x33,\n\t_4 = 0x34,\n\t_5 = 0x35,\n\t_6 = 0x36,\n\t_7 = 0x37,\n\t_8 = 0x38,\n\t_9 = 0x39,\n\n\ta = 0x61,\n\tb = 0x62,\n\tc = 0x63,\n\td = 0x64,\n\te = 0x65,\n\tf = 0x66,\n\tg = 0x67,\n\th = 0x68,\n\ti = 0x69,\n\tj = 0x6A,\n\tk = 0x6B,\n\tl = 0x6C,\n\tm = 0x6D,\n\tn = 0x6E,\n\to = 0x6F,\n\tp = 0x70,\n\tq = 0x71,\n\tr = 0x72,\n\ts = 0x73,\n\tt = 0x74,\n\tu = 0x75,\n\tv = 0x76,\n\tw = 0x77,\n\tx = 0x78,\n\ty = 0x79,\n\tz = 0x7A,\n\n\tA = 0x41,\n\tB = 0x42,\n\tC = 0x43,\n\tD = 0x44,\n\tE = 0x45,\n\tF = 0x46,\n\tG = 0x47,\n\tH = 0x48,\n\tI = 0x49,\n\tJ = 0x4A,\n\tK = 0x4B,\n\tL = 0x4C,\n\tM = 0x4D,\n\tN = 0x4E,\n\tO = 0x4F,\n\tP = 0x50,\n\tQ = 0x51,\n\tR = 0x52,\n\tS = 0x53,\n\tT = 0x54,\n\tU = 0x55,\n\tV = 0x56,\n\tW = 0x57,\n\tX = 0x58,\n\tY = 0x59,\n\tZ = 0x5a,\n\n\tampersand = 0x26,             // &\n\tasterisk = 0x2A,              // *\n\tat = 0x40,                    // @\n\tbackslash = 0x5C,             // \\\n\tbar = 0x7C,                   // |\n\tcaret = 0x5E,                 // ^\n\tcloseBrace = 0x7D,            // }\n\tcloseBracket = 0x5D,          // ]\n\tcloseParen = 0x29,            // )\n\tcolon = 0x3A,                 // :\n\tcomma = 0x2C,                 // ,\n\tdot = 0x2E,                   // .\n\tdoubleQuote = 0x22,           // \"\n\tequals = 0x3D,                // =\n\texclamation = 0x21,           // !\n\tgreaterThan = 0x3E,           // >\n\tlessThan = 0x3C,              // <\n\tminus = 0x2D,                 // -\n\topenBrace = 0x7B,             // {\n\topenBracket = 0x5B,           // [\n\topenParen = 0x28,             // (\n\tpercent = 0x25,               // %\n\tplus = 0x2B,                  // +\n\tquestion = 0x3F,              // ?\n\tsemicolon = 0x3B,             // ;\n\tsingleQuote = 0x27,           // '\n\tslash = 0x2F,                 // /\n\ttilde = 0x7E,                 // ~\n\n\tbackspace = 0x08,             // \\b\n\tformFeed = 0x0C,              // \\f\n\tbyteOrderMark = 0xFEFF,\n\ttab = 0x09,                   // \\t\n\tverticalTab = 0x0B,           // \\v\n}\n\n\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text:string, replaceCh?:string):string {\n\n\tlet _scanner = createScanner(text),\n\t\tparts: string[] = [],\n\t\tkind:SyntaxKind,\n\t\toffset = 0,\n\t\tpos:number;\n\n\tdo {\n\t\tpos = _scanner.getPosition();\n\t\tkind = _scanner.scan();\n\t\tswitch (kind) {\n\t\t\tcase SyntaxKind.LineCommentTrivia:\n\t\t\tcase SyntaxKind.BlockCommentTrivia:\n\t\t\tcase SyntaxKind.EOF:\n\t\t\t\tif(offset !== pos) {\n\t\t\t\t\tparts.push(text.substring(offset, pos));\n\t\t\t\t}\n\t\t\t\tif(replaceCh !== void 0) {\n\t\t\t\t\tparts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n\t\t\t\t}\n\t\t\t\toffset = _scanner.getPosition();\n\t\t\t\tbreak;\n\t\t}\n\t} while(kind !== SyntaxKind.EOF);\n\n\treturn parts.join('');\n}\n\nexport interface ParseError {\n\terror: ParseErrorCode;\n}\n\nexport enum ParseErrorCode {\n\tInvalidSymbol,\n\tInvalidNumberFormat,\n\tPropertyNameExpected,\n\tValueExpected,\n\tColonExpected,\n\tCommaExpected,\n\tCloseBraceExpected,\n\tCloseBracketExpected,\n\tEndOfFileExpected\n}\n\nexport function getParseErrorMessage(errorCode: ParseErrorCode) : string {\n\tswitch (errorCode) {\n\t\tcase ParseErrorCode.InvalidSymbol: return localize('error.invalidSymbol', 'Invalid symbol');\n\t\tcase ParseErrorCode.InvalidNumberFormat: return localize('error.invalidNumberFormat', 'Invalid number format');\n\t\tcase ParseErrorCode.PropertyNameExpected: return localize('error.propertyNameExpected', 'Property name expected');\n\t\tcase ParseErrorCode.ValueExpected: return localize('error.valueExpected', 'Value expected');\n\t\tcase ParseErrorCode.ColonExpected: return localize('error.colonExpected', 'Colon expected');\n\t\tcase ParseErrorCode.CommaExpected: return localize('error.commaExpected', 'Comma expected');\n\t\tcase ParseErrorCode.CloseBraceExpected: return localize('error.closeBraceExpected', 'Closing brace expected');\n\t\tcase ParseErrorCode.CloseBracketExpected: return localize('error.closeBracketExpected', 'Closing bracket expected');\n\t\tcase ParseErrorCode.EndOfFileExpected: return localize('error.endOfFileExpected', 'End of file expected');\n\t\tdefault:\n\t\t\treturn '';\n\t}\n}\n\nexport type NodeType = \"object\" | \"array\" | \"property\" | \"string\" | \"number\" | \"boolean\" | \"null\";\n\nfunction getLiteralNodeType(value: any) : NodeType {\n\tswitch (typeof value) {\n\t\tcase 'boolean': return 'boolean';\n\t\tcase 'number': return 'number';\n\t\tcase 'string': return 'string';\n\t\tdefault: return 'null';\n\t}\n}\n\nexport interface Node {\n\ttype: NodeType;\n\tvalue?: any;\n\toffset: number;\n\tlength: number;\n\tcolumnOffset?: number;\n\tparent?: Node;\n\tchildren?: Node[];\n}\n\nexport type Segment = string | number;\nexport type JSONPath = Segment[];\n\nexport interface Location {\n\t/**\n\t * The previous property key or literal value (string, number, boolean or null) or undefined.\n\t */\n\tpreviousNode?: Node;\n\t/**\n\t * The path describing the location in the JSON document. The path consists of a sequence strings\n\t * representing an object property or numbers for array indices.\n\t */\n\tpath: JSONPath;\n\t/**\n\t * Matches the locations path against a pattern consisting of strings (for properties) and numbers (for array indices).\n\t * '*' will match a single segment, of any property name or index.\n\t * '**' will match a sequece of segments or no segment, of any property name or index.\n\t */\n\tmatches: (patterns: JSONPath) => boolean;\n\t/**\n\t * If set, the location's offset is at a property key.\n\t */\n\tisAtPropertyKey: boolean;\n}\n\n\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text:string, position: number) : Location {\n\tlet segments: any[] = []; // strings or numbers\n\tlet earlyReturnException = new Object();\n\tlet previousNode : Node = void 0;\n\tconst previousNodeInst : Node = {\n\t\tvalue: void 0,\n\t\toffset: void 0,\n\t\tlength: void 0,\n\t\ttype: void 0\n\t};\n\tlet isAtPropertyKey = false;\n\tfunction setPreviousNode(value: string, offset: number, length: number, type: NodeType) {\n\t\tpreviousNodeInst.value = value;\n\t\tpreviousNodeInst.offset = offset;\n\t\tpreviousNodeInst.length = length;\n\t\tpreviousNodeInst.type = type;\n\t\tpreviousNodeInst.columnOffset = void 0;\n\t\tpreviousNode = previousNodeInst;\n\t}\n\ttry {\n\n\t\tvisit(text, {\n\t\t\tonObjectBegin: (offset: number, length: number) => {\n\t\t\t\tif (position <= offset) {\n\t\t\t\t\tthrow earlyReturnException;\n\t\t\t\t}\n\t\t\t\tpreviousNode = void 0;\n\t\t\t\tisAtPropertyKey = position > offset;\n\t\t\t\tsegments.push(''); // push a placeholder (will be replaced or removed)\n\t\t\t},\n\t\t\tonObjectProperty: (name: string, offset: number, length: number) => {\n\t\t\t\tif (position < offset) {\n\t\t\t\t\tthrow earlyReturnException;\n\t\t\t\t}\n\t\t\t\tsetPreviousNode(name, offset, length, 'property');\n\t\t\t\tsegments[segments.length - 1] = name;\n\t\t\t\tif (position <= offset + length) {\n\t\t\t\t\tthrow earlyReturnException;\n\t\t\t\t}\n\t\t\t},\n\t\t\tonObjectEnd: (offset: number, length: number) => {\n\t\t\t\tif (position <= offset) {\n\t\t\t\t\tthrow earlyReturnException;\n\t\t\t\t}\n\t\t\t\tpreviousNode = void 0;\n\t\t\t\tsegments.pop();\n\t\t\t},\n\t\t\tonArrayBegin: (offset: number, length: number) => {\n\t\t\t\tif (position <= offset) {\n\t\t\t\t\tthrow earlyReturnException;\n\t\t\t\t}\n\t\t\t\tpreviousNode = void 0;\n\t\t\t\tsegments.push(0);\n\t\t\t},\n\t\t\tonArrayEnd: (offset: number, length: number) => {\n\t\t\t\tif (position <= offset) {\n\t\t\t\t\tthrow earlyReturnException;\n\t\t\t\t}\n\t\t\t\tpreviousNode = void 0;\n\t\t\t\tsegments.pop();\n\t\t\t},\n\t\t\tonLiteralValue: (value: any, offset: number, length: number) => {\n\t\t\t\tif (position < offset) {\n\t\t\t\t\tthrow earlyReturnException;\n\t\t\t\t}\n\t\t\t\tsetPreviousNode(value, offset, length, getLiteralNodeType(value));\n\n\t\t\t\tif (position <= offset + length) {\n\t\t\t\t\tthrow earlyReturnException;\n\t\t\t\t}\n\t\t\t},\n\t\t\tonSeparator: (sep: string, offset: number, length: number) => {\n\t\t\t\tif (position <= offset) {\n\t\t\t\t\tthrow earlyReturnException;\n\t\t\t\t}\n\t\t\t\tif (sep === ':' && previousNode.type === 'property') {\n\t\t\t\t\tpreviousNode.columnOffset = offset;\n\t\t\t\t\tisAtPropertyKey = false;\n\t\t\t\t\tpreviousNode = void 0;\n\t\t\t\t} else if (sep === ',') {\n\t\t\t\t\tlet last = segments[segments.length - 1];\n\t\t\t\t\tif (typeof last === 'number') {\n\t\t\t\t\t\tsegments[segments.length - 1] = last + 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisAtPropertyKey = true;\n\t\t\t\t\t\tsegments[segments.length - 1] = '';\n\t\t\t\t\t}\n\t\t\t\t\tpreviousNode = void 0;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} catch (e) {\n\t\tif (e !== earlyReturnException) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tif (segments[segments.length - 1] === '') {\n\t\tsegments.pop();\n\t}\n\treturn {\n\t\tpath: segments,\n\t\tpreviousNode,\n\t\tisAtPropertyKey,\n\t\tmatches: (pattern: string[]) => {\n\t\t\tlet k = 0;\n\t\t\tfor (let i = 0; k < pattern.length && i < segments.length; i++) {\n\t\t\t\tif (pattern[k] === segments[i] || pattern[k] === '*') {\n\t\t\t\t\tk++;\n\t\t\t\t} else if (pattern[k] !== '**') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn k === pattern.length;\n\t\t}\n\t};\n}\n\nexport interface ParseOptions {\n\tdisallowComments?: boolean;\n}\n\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text:string, errors: ParseError[] = [], options?: ParseOptions) : any {\n\tlet currentProperty : string = null;\n\tlet currentParent : any = [];\n\tlet previousParents : any[] = [];\n\n\tfunction onValue(value: any) {\n\t\tif (Array.isArray(currentParent)) {\n\t\t\t(<any[]> currentParent).push(value);\n\t\t} else if (currentProperty) {\n\t\t\tcurrentParent[currentProperty] = value;\n\t\t}\n\t}\n\n\tlet visitor : JSONVisitor = {\n\t\tonObjectBegin: () => {\n\t\t\tlet object = {};\n\t\t\tonValue(object);\n\t\t\tpreviousParents.push(currentParent);\n\t\t\tcurrentParent = object;\n\t\t\tcurrentProperty = null;\n\t\t},\n\t\tonObjectProperty: (name: string) => {\n\t\t\tcurrentProperty = name;\n\t\t},\n\t\tonObjectEnd: () => {\n\t\t\tcurrentParent = previousParents.pop();\n\t\t},\n\t\tonArrayBegin: () => {\n\t\t\tlet array = [];\n\t\t\tonValue(array);\n\t\t\tpreviousParents.push(currentParent);\n\t\t\tcurrentParent = array;\n\t\t\tcurrentProperty = null;\n\t\t},\n\t\tonArrayEnd: () => {\n\t\t\tcurrentParent = previousParents.pop();\n\t\t},\n\t\tonLiteralValue: onValue,\n\t\tonError:(error:ParseErrorCode) => {\n\t\t\terrors.push({error: error});\n\t\t}\n\t};\n\tvisit(text, visitor, options);\n\treturn currentParent[0];\n}\n\n\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text:string, errors: ParseError[] = [], options?: ParseOptions) : Node {\n\tlet currentParent : Node = { type: 'array', offset: -1, length: -1, children: [] }; // artificial root\n\n\tfunction ensurePropertyComplete(endOffset:number) {\n\t\tif (currentParent.type === 'property') {\n\t\t\tcurrentParent.length = endOffset - currentParent.offset;\n\t\t\tcurrentParent = currentParent.parent;\n\t\t}\n\t}\n\n\tfunction onValue(valueNode: Node) : Node {\n\t\tcurrentParent.children.push(valueNode);\n\t\tensurePropertyComplete(valueNode.offset + valueNode.length);\n\t\treturn valueNode;\n\t}\n\n\tlet visitor : JSONVisitor = {\n\t\tonObjectBegin: (offset: number) => {\n\t\t\tcurrentParent = onValue({ type: 'object', offset, length: -1, parent: currentParent, children: [] });\n\t\t},\n\t\tonObjectProperty: (name: string, offset: number, length: number) => {\n\t\t\tcurrentParent = onValue({ type: 'property', offset, length: -1, parent: currentParent, children: [] });\n\t\t\tcurrentParent.children.push({ type: 'string', value: name, offset, length, parent: currentParent});\n\t\t},\n\t\tonObjectEnd: (offset: number, length: number) => {\n\t\t\tensurePropertyComplete(offset);\n\t\t\tcurrentParent.length = offset + length - currentParent.offset;\n\t\t\tcurrentParent = currentParent.parent;\n\t\t},\n\t\tonArrayBegin: (offset: number, length: number) => {\n\t\t\tcurrentParent = onValue({ type: 'array', offset, length: -1, parent: currentParent, children: [] });\n\t\t},\n\t\tonArrayEnd: (offset: number, length: number) => {\n\t\t\tcurrentParent.length = offset + length - currentParent.offset;\n\t\t\tcurrentParent = currentParent.parent;\n\t\t},\n\t\tonLiteralValue: (value: any, offset: number, length: number) => {\n\t\t\tonValue({ type: getLiteralNodeType(value), offset, length, parent: currentParent, value });\n\t\t},\n\t\tonSeparator: (sep: string, offset: number, length: number) => {\n\t\t\tif (currentParent.type === 'property') {\n\t\t\t\tif (sep === ':') {\n\t\t\t\t\tcurrentParent.columnOffset = offset;\n\t\t\t\t} else if (sep === ',') {\n\t\t\t\t\tensurePropertyComplete(offset);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonError:(error:ParseErrorCode) => {\n\t\t\terrors.push({error: error});\n\t\t}\n\t};\n\tvisit(text, visitor, options);\n\n\tlet result = currentParent.children[0];\n\tif (result) {\n\t\tdelete result.parent;\n\t}\n\treturn result;\n}\n\nexport function findNodeAtLocation(root: Node, path: JSONPath) : Node {\n\tif (!root) {\n\t\treturn void 0;\n\t}\n\tlet node = root;\n\tfor (let segment of path) {\n\t\tif (typeof segment === 'string') {\n\t\t\tif (node.type !== 'object') {\n\t\t\t\treturn void 0;\n\t\t\t}\n\t\t\tlet found = false;\n\t\t\tfor (let propertyNode of node.children) {\n\t\t\t\tif (propertyNode.children[0].value === segment) {\n\t\t\t\t\tnode = propertyNode.children[1];\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\treturn void 0;\n\t\t\t}\n\t\t} else {\n\t\t\tlet index = <number> segment;\n\t\t\tif (node.type !== 'array' || index < 0 || index >= node.children.length) {\n\t\t\t\treturn void 0;\n\t\t\t}\n\t\t\tnode = node.children[index];\n\t\t}\n\t}\n\treturn node;\n}\n\nexport function getNodeValue(node: Node) : any {\n\tif (node.type === 'array') {\n\t\treturn node.children.map(getNodeValue);\n\t} else if (node.type === 'object') {\n\t\tlet obj = {};\n\t\tfor (let prop of node.children) {\n\t\t\tobj[prop.children[0].value] = getNodeValue(prop.children[1]);\n\t\t}\n\t\treturn obj;\n\t}\n\treturn node.value;\n}\n\n\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text:string, visitor: JSONVisitor, options?: ParseOptions) : any {\n\n\tlet _scanner = createScanner(text, false);\n\n\tfunction toNoArgVisit(visitFunction: (offset: number, length: number) => void) : () => void {\n\t\treturn visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength()) : () => true;\n\t}\n\tfunction toOneArgVisit<T>(visitFunction: (arg: T, offset: number, length: number) => void) : (arg: T) => void {\n\t\treturn visitFunction ? (arg: T) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength()) : () => true;\n\t}\n\n\tlet onObjectBegin = toNoArgVisit(visitor.onObjectBegin),\n\t\tonObjectProperty = toOneArgVisit(visitor.onObjectProperty),\n\t\tonObjectEnd = toNoArgVisit(visitor.onObjectEnd),\n\t\tonArrayBegin = toNoArgVisit(visitor.onArrayBegin),\n\t\tonArrayEnd = toNoArgVisit(visitor.onArrayEnd),\n\t\tonLiteralValue = toOneArgVisit(visitor.onLiteralValue),\n\t\tonSeparator = toOneArgVisit(visitor.onSeparator),\n\t\tonError = toOneArgVisit(visitor.onError);\n\n\tlet disallowComments = options && options.disallowComments;\n\tfunction scanNext() : SyntaxKind {\n\t\twhile (true) {\n\t\t\tlet token = _scanner.scan();\n\t\t\tswitch (token) {\n\t\t\t\tcase SyntaxKind.LineCommentTrivia:\n\t\t\t\tcase SyntaxKind.BlockCommentTrivia:\n\t\t\t\t\tif (disallowComments) {\n\t\t\t\t\t\thandleError(ParseErrorCode.InvalidSymbol);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase SyntaxKind.Unknown:\n\t\t\t\t\thandleError(ParseErrorCode.InvalidSymbol);\n\t\t\t\t\tbreak;\n\t\t\t\tcase SyntaxKind.Trivia:\n\t\t\t\tcase SyntaxKind.LineBreakTrivia:\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn token;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction handleError(error:ParseErrorCode, skipUntilAfter: SyntaxKind[] = [], skipUntil: SyntaxKind[] = []) : void {\n\t\tonError(error);\n\t\tif (skipUntilAfter.length + skipUntil.length > 0) {\n\t\t\tlet token = _scanner.getToken();\n\t\t\twhile (token !== SyntaxKind.EOF) {\n\t\t\t\tif (skipUntilAfter.indexOf(token) !== -1) {\n\t\t\t\t\tscanNext();\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (skipUntil.indexOf(token) !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ttoken = scanNext();\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction parseString(isValue: boolean) : boolean {\n\t\tif (_scanner.getToken() !== SyntaxKind.StringLiteral) {\n\t\t\treturn false;\n\t\t}\n\t\tlet value = _scanner.getTokenValue();\n\t\tif (isValue) {\n\t\t\tonLiteralValue(value);\n\t\t} else {\n\t\t\tonObjectProperty(value);\n\t\t}\n\t\tscanNext();\n\t\treturn true;\n\t}\n\n\tfunction parseLiteral() : boolean {\n\t\tswitch (_scanner.getToken()) {\n\t\t\tcase SyntaxKind.NumericLiteral:\n\t\t\t\tlet value = 0;\n\t\t\t\ttry {\n\t\t\t\t\tvalue = JSON.parse(_scanner.getTokenValue());\n\t\t\t\t\tif (typeof value !== 'number') {\n\t\t\t\t\t\thandleError(ParseErrorCode.InvalidNumberFormat);\n\t\t\t\t\t\tvalue = 0;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\thandleError(ParseErrorCode.InvalidNumberFormat);\n\t\t\t\t}\n\t\t\t\tonLiteralValue(value);\n\t\t\t\tbreak;\n\t\t\tcase SyntaxKind.NullKeyword:\n\t\t\t\tonLiteralValue(null);\n\t\t\t\tbreak;\n\t\t\tcase SyntaxKind.TrueKeyword:\n\t\t\t\tonLiteralValue(true);\n\t\t\t\tbreak;\n\t\t\tcase SyntaxKind.FalseKeyword:\n\t\t\t\tonLiteralValue(false);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t\tscanNext();\n\t\treturn true;\n\t}\n\n\tfunction parseProperty() : boolean {\n\t\tif (!parseString(false)) {\n\t\t\thandleError(ParseErrorCode.PropertyNameExpected, [], [SyntaxKind.CloseBraceToken, SyntaxKind.CommaToken] );\n\t\t\treturn false;\n\t\t}\n\t\tif (_scanner.getToken() === SyntaxKind.ColonToken) {\n\t\t\tonSeparator(':');\n\t\t\tscanNext(); // consume colon\n\n\t\t\tif (!parseValue()) {\n\t\t\t\thandleError(ParseErrorCode.ValueExpected, [], [SyntaxKind.CloseBraceToken, SyntaxKind.CommaToken] );\n\t\t\t}\n\t\t} else {\n\t\t\thandleError(ParseErrorCode.ColonExpected, [], [SyntaxKind.CloseBraceToken, SyntaxKind.CommaToken] );\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction parseObject() : boolean {\n\t\tif (_scanner.getToken() !== SyntaxKind.OpenBraceToken) {\n\t\t\treturn false;\n\t\t}\n\t\tonObjectBegin();\n\t\tscanNext(); // consume open brace\n\n\t\tlet needsComma = false;\n\t\twhile (_scanner.getToken() !== SyntaxKind.CloseBraceToken && _scanner.getToken() !== SyntaxKind.EOF) {\n\t\t\tif (_scanner.getToken() === SyntaxKind.CommaToken) {\n\t\t\t\tif (!needsComma) {\n\t\t\t\t\thandleError(ParseErrorCode.ValueExpected, [], [] );\n\t\t\t\t}\n\t\t\t\tonSeparator(',');\n\t\t\t\tscanNext(); // consume comma\n\t\t\t} else if (needsComma) {\n\t\t\t\thandleError(ParseErrorCode.CommaExpected, [], [] );\n\t\t\t}\n\t\t\tif (!parseProperty()) {\n\t\t\t\thandleError(ParseErrorCode.ValueExpected, [], [SyntaxKind.CloseBraceToken, SyntaxKind.CommaToken] );\n\t\t\t}\n\t\t\tneedsComma = true;\n\t\t}\n\t\tonObjectEnd();\n\t\tif (_scanner.getToken() !== SyntaxKind.CloseBraceToken) {\n\t\t\thandleError(ParseErrorCode.CloseBraceExpected, [SyntaxKind.CloseBraceToken], []);\n\t\t} else {\n\t\t\tscanNext(); // consume close brace\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction parseArray() : boolean {\n\t\tif (_scanner.getToken() !== SyntaxKind.OpenBracketToken) {\n\t\t\treturn false;\n\t\t}\n\t\tonArrayBegin();\n\t\tscanNext(); // consume open bracket\n\n\t\tlet needsComma = false;\n\t\twhile (_scanner.getToken() !== SyntaxKind.CloseBracketToken && _scanner.getToken() !== SyntaxKind.EOF) {\n\t\t\tif (_scanner.getToken() === SyntaxKind.CommaToken) {\n\t\t\t\tif (!needsComma) {\n\t\t\t\t\thandleError(ParseErrorCode.ValueExpected, [], [] );\n\t\t\t\t}\n\t\t\t\tonSeparator(',');\n\t\t\t\tscanNext(); // consume comma\n\t\t\t} else if (needsComma) {\n\t\t\t\thandleError(ParseErrorCode.CommaExpected, [], [] );\n\t\t\t}\n\t\t\tif (!parseValue()) {\n\t\t\t\thandleError(ParseErrorCode.ValueExpected, [], [SyntaxKind.CloseBracketToken, SyntaxKind.CommaToken] );\n\t\t\t}\n\t\t\tneedsComma = true;\n\t\t}\n\t\tonArrayEnd();\n\t\tif (_scanner.getToken() !== SyntaxKind.CloseBracketToken) {\n\t\t\thandleError(ParseErrorCode.CloseBracketExpected, [SyntaxKind.CloseBracketToken], []);\n\t\t} else {\n\t\t\tscanNext(); // consume close bracket\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction parseValue() : boolean {\n\t\treturn parseArray() || parseObject() || parseString(true) || parseLiteral();\n\t}\n\n\tscanNext();\n\tif (_scanner.getToken() === SyntaxKind.EOF) {\n\t\treturn true;\n\t}\n\tif (!parseValue()) {\n\t\thandleError(ParseErrorCode.ValueExpected, [], []);\n\t\treturn false;\n\t}\n\tif (_scanner.getToken() !== SyntaxKind.EOF) {\n\t\thandleError(ParseErrorCode.EndOfFileExpected, [], []);\n\t}\n\treturn true;\n}\n\nexport interface JSONVisitor {\n\t/**\n\t * Invoked when an open brace is encountered and an object is started. The offset and length represent the location of the open brace.\n\t */\n\tonObjectBegin?: (offset:number, length:number) => void;\n\n\t/**\n\t * Invoked when a property is encountered. The offset and length represent the location of the property name.\n\t */\n\tonObjectProperty?: (property: string, offset:number, length:number) => void;\n\n\t/**\n\t * Invoked when a closing brace is encountered and an object is completed. The offset and length represent the location of the closing brace.\n\t */\n\tonObjectEnd?: (offset:number, length:number) => void;\n\n\t/**\n\t * Invoked when an open bracket is encountered. The offset and length represent the location of the open bracket.\n\t */\n\tonArrayBegin?: (offset:number, length:number) => void;\n\n\t/**\n\t * Invoked when a closing bracket is encountered. The offset and length represent the location of the closing bracket.\n\t */\n\tonArrayEnd?: (offset:number, length:number) => void;\n\n\t/**\n\t * Invoked when a literal value is encountered. The offset and length represent the location of the literal value.\n\t */\n\tonLiteralValue?: (value: any, offset:number, length:number) => void;\n\n\t/**\n\t * Invoked when a comma or colon separator is encountered. The offset and length represent the location of the separator.\n\t */\n\tonSeparator?: (charcter: string, offset:number, length:number) => void;\n\n\t/**\n\t * Invoked on an error.\n\t */\n\tonError?: (error: ParseErrorCode, offset:number, length:number) => void;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport json = require('vs/base/common/json');\nimport Modes = require('vs/editor/common/modes');\nimport jsonTokenTypes = require('vs/languages/json/common/features/jsonTokenTypes');\n\nexport function createTokenizationSupport(mode:Modes.IMode, supportComments:boolean):Modes.ITokenizationSupport {\n\treturn {\n\t\tshouldGenerateEmbeddedModels: false,\n\t\tgetInitialState: () => new JSONState(mode, null, null, false),\n\t\ttokenize: (line, state, offsetDelta?, stopAtOffset?) => tokenize(mode, supportComments, line, <JSONState> state, offsetDelta, stopAtOffset)\n\t};\n}\n\nclass JSONState implements Modes.IState {\n\n\tprivate _mode: Modes.IMode;\n\tprivate _state: Modes.IState;\n\n\tpublic scanError: json.ScanError;\n\tpublic lastWasColon: boolean;\n\n\tconstructor(mode: Modes.IMode, state: Modes.IState, scanError: json.ScanError, lastWasColon:boolean) {\n\t\tthis._mode = mode;\n\t\tthis._state = state;\n\t\tthis.scanError = scanError;\n\t\tthis.lastWasColon = lastWasColon;\n\t}\n\n\tpublic clone():JSONState {\n\t\treturn new JSONState(this._mode, this._state, this.scanError, this.lastWasColon);\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif(other === this) {\n\t\t\treturn true;\n\t\t}\n\t\tif(!other || !(other instanceof JSONState)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.scanError === (<JSONState> other).scanError &&\n\t\t\tthis.lastWasColon === (<JSONState> other).lastWasColon;\n\t}\n\n\tpublic getMode():Modes.IMode {\n\t\treturn this._mode;\n\t}\n\n\tpublic tokenize(stream:any):Modes.ITokenizationResult {\n\t\tthrow new Error();\n\t}\n\n\tpublic getStateData():Modes.IState {\n\t\treturn this._state;\n\t}\n\n\tpublic setStateData(state:Modes.IState):void {\n\t\tthis._state = state;\n\t}\n}\n\nfunction tokenize(mode:Modes.IMode, comments:boolean, line:string, state:JSONState, offsetDelta:number = 0, stopAtOffset?:number):Modes.ILineTokens {\n\n\t// handle multiline strings and block comments\n\tvar numberOfInsertedCharacters = 0,\n\t\tadjustOffset = false;\n\n\tswitch(state.scanError) {\n\t\tcase json.ScanError.UnexpectedEndOfString:\n\t\t\tline = '\"' + line;\n\t\t\tnumberOfInsertedCharacters = 1;\n\t\t\tbreak;\n\t\tcase json.ScanError.UnexpectedEndOfComment:\n\t\t\tline = '/*' + line;\n\t\t\tnumberOfInsertedCharacters = 2;\n\t\t\tbreak;\n\t}\n\n\tvar scanner = json.createScanner(line),\n\t\tkind: json.SyntaxKind,\n\t\tret:Modes.ILineTokens,\n\t\tlastWasColon = state.lastWasColon;\n\n\tret = {\n\t\ttokens: <Modes.IToken[]>[],\n\t\tactualStopOffset: line.length,\n\t\tendState: state.clone(),\n\t\tmodeTransitions: [{ startIndex: 0, mode: mode }],\n\t};\n\n\twhile(true) {\n\n\t\tvar offset = offsetDelta + scanner.getPosition(),\n\t\t\ttype = '';\n\n\t\tkind = scanner.scan();\n\t\tif(kind === json.SyntaxKind.EOF) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// Check that the scanner has advanced\n\t\tif (offset === offsetDelta + scanner.getPosition()) {\n\t\t\tthrow new Error('Scanner did not advance, next 3 characters are: ' + line.substr(scanner.getPosition(), 3));\n\t\t}\n\n\t\t// In case we inserted /* or \" character, we need to\n\t\t// adjust the offset of all tokens (except the first)\n\t\tif(adjustOffset) {\n\t\t\toffset -= numberOfInsertedCharacters;\n\t\t}\n\t\tadjustOffset = numberOfInsertedCharacters > 0;\n\n\n\t\t// brackets and type\n\t\tswitch(kind) {\n\t\t\tcase json.SyntaxKind.OpenBraceToken:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_DELIM_OBJECT;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.CloseBraceToken:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_DELIM_OBJECT;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.OpenBracketToken:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_DELIM_ARRAY;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.CloseBracketToken:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_DELIM_ARRAY;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.ColonToken:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_DELIM_COLON;\n\t\t\t\tlastWasColon = true;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.CommaToken:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_DELIM_COMMA;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.TrueKeyword:\n\t\t\tcase json.SyntaxKind.FalseKeyword:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_VALUE_BOOLEAN;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.NullKeyword:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_VALUE_NULL;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.StringLiteral:\n\t\t\t\ttype = lastWasColon ? jsonTokenTypes.TOKEN_VALUE_STRING : jsonTokenTypes.TOKEN_PROPERTY_NAME;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t\tcase json.SyntaxKind.NumericLiteral:\n\t\t\t\ttype = jsonTokenTypes.TOKEN_VALUE_NUMBER;\n\t\t\t\tlastWasColon = false;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// comments, iff enabled\n\t\tif(comments) {\n\t\t\tswitch (kind) {\n\t\t\t\tcase json.SyntaxKind.LineCommentTrivia:\n\t\t\t\t\ttype = jsonTokenTypes.TOKEN_COMMENT_LINE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase json.SyntaxKind.BlockCommentTrivia:\n\t\t\t\t\ttype = jsonTokenTypes.TOKEN_COMMENT_BLOCK;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tret.endState = new JSONState(state.getMode(), state.getStateData(), scanner.getTokenError(), lastWasColon);\n\t\tret.tokens.push({\n\t\t\tstartIndex: offset,\n\t\t\ttype: type\n\t\t});\n\t}\n\n\treturn ret;\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport editorCommon = require('vs/editor/common/editorCommon');\nimport modes = require('vs/editor/common/modes');\nimport URI from 'vs/base/common/uri';\nimport WinJS = require('vs/base/common/winjs.base');\nimport Platform = require('vs/platform/platform');\nimport jsonWorker = require('vs/languages/json/common/jsonWorker');\nimport tokenization = require('vs/languages/json/common/features/tokenization');\nimport {AbstractMode, createWordRegExp, ModeWorkerManager} from 'vs/editor/common/modes/abstractMode';\nimport {OneWorkerAttr, AllWorkersAttr} from 'vs/platform/thread/common/threadService';\nimport {IThreadService, ThreadAffinity} from 'vs/platform/thread/common/thread';\nimport {IJSONContributionRegistry, Extensions, ISchemaContributions} from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {LanguageConfigurationRegistry, LanguageConfiguration} from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport {wireCancellationToken} from 'vs/base/common/async';\n\nexport class JSONMode extends AbstractMode {\n\n\tpublic static LANG_CONFIG:LanguageConfiguration = {\n\t\twordPattern: createWordRegExp('.-'),\n\n\t\tcomments: {\n\t\t\tlineComment: '//',\n\t\t\tblockComment: ['/*', '*/']\n\t\t},\n\n\t\tbrackets: [\n\t\t\t['{', '}'],\n\t\t\t['[', ']']\n\t\t],\n\n\t\tautoClosingPairs: [\n\t\t\t{ open: '{', close: '}', notIn: ['string'] },\n\t\t\t{ open: '[', close: ']', notIn: ['string'] },\n\t\t\t{ open: '\"', close: '\"', notIn: ['string'] }\n\t\t]\n\t};\n\n\tpublic tokenizationSupport: modes.ITokenizationSupport;\n\tpublic configSupport:modes.IConfigurationSupport;\n\tpublic inplaceReplaceSupport:modes.IInplaceReplaceSupport;\n\n\tprivate _modeWorkerManager: ModeWorkerManager<jsonWorker.JSONWorker>;\n\tprivate _threadService:IThreadService;\n\n\tconstructor(\n\t\tdescriptor:modes.IModeDescriptor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IThreadService threadService: IThreadService\n\t) {\n\t\tsuper(descriptor.id);\n\t\tthis._modeWorkerManager = new ModeWorkerManager<jsonWorker.JSONWorker>(descriptor, 'vs/languages/json/common/jsonWorker', 'JSONWorker', null, instantiationService);\n\t\tthis._threadService = threadService;\n\n\t\tthis.tokenizationSupport = tokenization.createTokenizationSupport(this, true);\n\n\t\tLanguageConfigurationRegistry.register(this.getId(), JSONMode.LANG_CONFIG);\n\n\t\tmodes.HoverProviderRegistry.register(this.getId(), {\n\t\t\tprovideHover: (model, position, token): Thenable<modes.Hover> => {\n\t\t\t\treturn wireCancellationToken(token, this._provideHover(model.uri, position));\n\t\t\t}\n\t\t}, true);\n\n\t\tthis.inplaceReplaceSupport = this;\n\n\t\tthis.configSupport = this;\n\n\t\t// Initialize Outline support\n\t\tmodes.DocumentSymbolProviderRegistry.register(this.getId(), {\n\t\t\tprovideDocumentSymbols: (model, token): Thenable<modes.SymbolInformation[]> => {\n\t\t\t\treturn wireCancellationToken(token, this._provideDocumentSymbols(model.uri));\n\t\t\t}\n\t\t}, true);\n\n\t\tmodes.DocumentFormattingEditProviderRegistry.register(this.getId(), {\n\t\t\tprovideDocumentFormattingEdits: (model, options, token): Thenable<editorCommon.ISingleEditOperation[]> => {\n\t\t\t\treturn wireCancellationToken(token, this._provideDocumentFormattingEdits(model.uri, options));\n\t\t\t}\n\t\t}, true);\n\n\t\tmodes.DocumentRangeFormattingEditProviderRegistry.register(this.getId(), {\n\t\t\tprovideDocumentRangeFormattingEdits: (model, range, options, token): Thenable<editorCommon.ISingleEditOperation[]> => {\n\t\t\t\treturn wireCancellationToken(token, this._provideDocumentRangeFormattingEdits(model.uri, range, options));\n\t\t\t}\n\t\t}, true);\n\n\t\tmodes.SuggestRegistry.register(this.getId(), {\n\t\t\ttriggerCharacters: [],\n\t\t\tshouldAutotriggerSuggest: true,\n\t\t\tprovideCompletionItems: (model, position, token): Thenable<modes.ISuggestResult[]> => {\n\t\t\t\treturn wireCancellationToken(token, this._provideCompletionItems(model.uri, position));\n\t\t\t}\n\t\t}, true);\n\t}\n\n\tpublic creationDone(): void {\n\t\tif (this._threadService.isInMainThread) {\n\t\t\t// Pick a worker to do validation\n\t\t\tthis._pickAWorkerToValidate();\n\n\t\t\t// Configure all workers\n\t\t\tthis._configureWorkerSchemas(this.getSchemaConfiguration());\n\t\t\tvar contributionRegistry = <IJSONContributionRegistry> Platform.Registry.as(Extensions.JSONContribution);\n\t\t\tcontributionRegistry.addRegistryChangedListener(e => {\n\t\t\t\tthis._configureWorkerSchemas(this.getSchemaConfiguration());\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _worker<T>(runner:(worker:jsonWorker.JSONWorker)=>WinJS.TPromise<T>): WinJS.TPromise<T> {\n\t\treturn this._modeWorkerManager.worker(runner);\n\t}\n\n\tprivate getSchemaConfiguration() : ISchemaContributions {\n\t\tvar contributionRegistry = <IJSONContributionRegistry> Platform.Registry.as(Extensions.JSONContribution);\n\t\treturn contributionRegistry.getSchemaContributions();\n\t}\n\n\tpublic configure(options:any): WinJS.TPromise<void> {\n\t\tif (this._threadService.isInMainThread) {\n\t\t\treturn this._configureWorkers(options);\n\t\t} else {\n\t\t\treturn this._worker((w) => w._doConfigure(options));\n\t\t}\n\t}\n\n\tstatic $_configureWorkers = AllWorkersAttr(JSONMode, JSONMode.prototype._configureWorkers);\n\tprivate _configureWorkers(options:any): WinJS.TPromise<void> {\n\t\treturn this._worker((w) => w._doConfigure(options));\n\t}\n\n\tstatic $_configureWorkerSchemas = AllWorkersAttr(JSONMode, JSONMode.prototype._configureWorkerSchemas);\n\tprivate _configureWorkerSchemas(data:ISchemaContributions): WinJS.TPromise<boolean> {\n\t\treturn this._worker((w) => w.setSchemaContributions(data));\n\t}\n\n\tstatic $_pickAWorkerToValidate = OneWorkerAttr(JSONMode, JSONMode.prototype._pickAWorkerToValidate, ThreadAffinity.Group1);\n\tprivate _pickAWorkerToValidate(): WinJS.TPromise<void> {\n\t\treturn this._worker((w) => w.enableValidator());\n\t}\n\n\tstatic $navigateValueSet = OneWorkerAttr(JSONMode, JSONMode.prototype.navigateValueSet);\n\tpublic navigateValueSet(resource:URI, position:editorCommon.IRange, up:boolean):WinJS.TPromise<modes.IInplaceReplaceSupportResult> {\n\t\treturn this._worker((w) => w.navigateValueSet(resource, position, up));\n\t}\n\n\tstatic $_provideCompletionItems = OneWorkerAttr(JSONMode, JSONMode.prototype._provideCompletionItems);\n\tprivate _provideCompletionItems(resource:URI, position:editorCommon.IPosition):WinJS.TPromise<modes.ISuggestResult[]> {\n\t\treturn this._worker((w) => w.provideCompletionItems(resource, position));\n\t}\n\n\tstatic $_provideHover = OneWorkerAttr(JSONMode, JSONMode.prototype._provideHover);\n\tprivate _provideHover(resource:URI, position:editorCommon.IPosition): WinJS.TPromise<modes.Hover> {\n\t\treturn this._worker((w) => w.provideHover(resource, position));\n\t}\n\n\tstatic $_provideDocumentSymbols = OneWorkerAttr(JSONMode, JSONMode.prototype._provideDocumentSymbols);\n\tprivate _provideDocumentSymbols(resource:URI):WinJS.TPromise<modes.SymbolInformation[]> {\n\t\treturn this._worker((w) => w.provideDocumentSymbols(resource));\n\t}\n\n\tstatic $_provideDocumentFormattingEdits = OneWorkerAttr(JSONMode, JSONMode.prototype._provideDocumentFormattingEdits);\n\tpublic _provideDocumentFormattingEdits(resource:URI, options:modes.FormattingOptions):WinJS.TPromise<editorCommon.ISingleEditOperation[]> {\n\t\treturn this._worker((w) => w.format(resource, null, options));\n\t}\n\n\tstatic $_provideDocumentRangeFormattingEdits = OneWorkerAttr(JSONMode, JSONMode.prototype._provideDocumentRangeFormattingEdits);\n\tpublic _provideDocumentRangeFormattingEdits(resource:URI, range:editorCommon.IRange, options:modes.FormattingOptions):WinJS.TPromise<editorCommon.ISingleEditOperation[]> {\n\t\treturn this._worker((w) => w.format(resource, range, options));\n\t}\n}"]}