{"version":3,"sources":["fake","file:///C:/Alex/src/vscode/src/vs/languages/markdown/common/markdown.ts"],"names":[],"mappings":"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","file":"vs/languages/markdown/common/markdown.js","sourcesContent":["}).call(this);","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Types = require('vs/editor/common/modes/monarch/monarchTypes');\nimport Compile = require('vs/editor/common/modes/monarch/monarchCompile');\nimport Modes = require('vs/editor/common/modes');\nimport {htmlTokenTypes} from 'vs/languages/html/common/html';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IThreadService} from 'vs/platform/thread/common/thread';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {IEditorWorkerService} from 'vs/editor/common/services/editorWorkerService';\nimport {AbstractMode} from 'vs/editor/common/modes/abstractMode';\nimport {createTokenizationSupport} from 'vs/editor/common/modes/monarch/monarchLexer';\nimport {LanguageConfigurationRegistry, LanguageConfiguration} from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport {wireCancellationToken} from 'vs/base/common/async';\n\nexport const TOKEN_HEADER_LEAD = 'entity.name.tag';\nexport const TOKEN_HEADER = 'entity.name.tag';\nexport const TOKEN_EXT_HEADER = 'entity.other.attribute-name';\nexport const TOKEN_SEPARATOR = 'meta.separator';\nexport const TOKEN_QUOTE = 'comment';\nexport const TOKEN_LIST = 'keyword';\nexport const TOKEN_BLOCK = 'string';\nexport const TOKEN_BLOCK_CODE = 'variable.source';\n\nexport const language =\n\t<Types.IMonarchLanguage>{\n\t\tdefaultToken: '',\n\t\ttokenPostfix: '.md',\n\n\t\t// escape codes\n\t\tcontrol: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n\t\tnoncontrol: /[^\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n\t\tescapes: /\\\\(?:@control)/,\n\n\t\t// escape codes for javascript/CSS strings\n\t\tjsescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n\n\t\t// non matched elements\n\t\tempty: [\n\t\t\t'area', 'base', 'basefont', 'br', 'col', 'frame',\n\t\t\t'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param'\n\t\t],\n\n\t\ttokenizer: {\n\t\t\troot: [\n\n\t\t\t\t// headers (with #)\n\t\t\t\t[/^(\\s{0,3})(#+)((?:[^\\\\#]|@escapes)+)((?:#+)?)/, ['white', TOKEN_HEADER_LEAD, TOKEN_HEADER, TOKEN_HEADER]],\n\n\t\t\t\t// headers (with =)\n\t\t\t\t[/^\\s*(=+|\\-+)\\s*$/, TOKEN_EXT_HEADER],\n\n\t\t\t\t// headers (with ***)\n\t\t\t\t[/^\\s*((\\*[ ]?)+)\\s*$/, TOKEN_SEPARATOR],\n\n\t\t\t\t// quote\n\t\t\t\t[/^\\s*>+/, TOKEN_QUOTE],\n\n\t\t\t\t// list (starting with * or number)\n\t\t\t\t[/^\\s*([\\*\\-+:]|\\d+\\.)\\s/, TOKEN_LIST],\n\n\t\t\t\t// code block (4 spaces indent)\n\t\t\t\t[/^(\\t|[ ]{4})[^ ].*$/, TOKEN_BLOCK],\n\n\t\t\t\t// code block (3 tilde)\n\t\t\t\t[/^\\s*~{3}\\s*((?:\\w|[\\/\\-#])+)?\\s*$/, { token: TOKEN_BLOCK, next: '@codeblock' }],\n\n\t\t\t\t// github style code blocks (with backticks and language)\n\t\t\t\t[/^\\s*```\\s*((?:\\w|[\\/\\-#])+)\\s*$/, { token: TOKEN_BLOCK, next: '@codeblockgh', nextEmbedded: '$1' }],\n\n\t\t\t\t// github style code blocks (with backticks but no language)\n\t\t\t\t[/^\\s*`{3}\\s*$/, { token: TOKEN_BLOCK, next: '@codeblock' }],\n\n\t\t\t\t// markup within lines\n\t\t\t\t{ include: '@linecontent' },\n\t\t\t],\n\n\t\t\tcodeblock: [\n\t\t\t\t[/^\\s*~{3}\\s*$/, { token: TOKEN_BLOCK, next: '@pop' }],\n\t\t\t\t[/^\\s*`{3}\\s*$/, { token: TOKEN_BLOCK, next: '@pop' }],\n\t\t\t\t[/.*$/, TOKEN_BLOCK_CODE],\n\t\t\t],\n\n\t\t\t// github style code blocks\n\t\t\tcodeblockgh: [\n\t\t\t\t[/```\\s*$/, { token: '@rematch', switchTo: '@codeblockghend', nextEmbedded: '@pop' }],\n\t\t\t\t[/[^`]*$/, TOKEN_BLOCK_CODE],\n\t\t\t],\n\n\t\t\tcodeblockghend: [\n\t\t\t\t[/\\s*```/, { token: TOKEN_BLOCK_CODE, next: '@pop' }],\n\t\t\t\t[/./, '@rematch', '@pop'],\n\t\t\t],\n\n\t\t\tlinecontent: [\n\n\t\t\t\t// escapes\n\t\t\t\t[/&\\w+;/, 'string.escape'],\n\t\t\t\t[/@escapes/, 'escape'],\n\n\t\t\t\t// various markup\n\t\t\t\t[/\\b__([^\\\\_]|@escapes|_(?!_))+__\\b/, 'strong'],\n\t\t\t\t[/\\*\\*([^\\\\*]|@escapes|\\*(?!\\*))+\\*\\*/, 'strong'],\n\t\t\t\t[/\\b_[^_]+_\\b/, 'emphasis'],\n\t\t\t\t[/\\*([^\\\\*]|@escapes)+\\*/, 'emphasis'],\n\t\t\t\t[/`([^\\\\`]|@escapes)+`/, 'variable'],\n\n\t\t\t\t// links\n\t\t\t\t[/\\{[^}]+\\}/, 'string.target'],\n\t\t\t\t[/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\]\\([^\\)]+\\))/, ['string.link', '', 'string.link']],\n\t\t\t\t[/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\])/, 'string.link'],\n\n\t\t\t\t// or html\n\t\t\t\t{ include: 'html' },\n\t\t\t],\n\n\t\t\t// Note: it is tempting to rather switch to the real HTML mode instead of building our own here\n\t\t\t// but currently there is a limitation in Monarch that prevents us from doing it: The opening\n\t\t\t// '<' would start the HTML mode, however there is no way to jump 1 character back to let the\n\t\t\t// HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,\n\t\t\t// we cannot correctly tokenize it in that mode yet.\n\t\t\thtml: [\n\t\t\t\t// html tags\n\t\t\t\t[/<(\\w+)\\/>/, htmlTokenTypes.getTag('$1')],\n\t\t\t\t[/<(\\w+)/, {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@empty': { token: htmlTokenTypes.getTag('$1'), next: '@tag.$1' },\n\t\t\t\t\t\t'@default': { token: htmlTokenTypes.getTag('$1'), bracket: '@open', next: '@tag.$1' }\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\t[/<\\/(\\w+)\\s*>/, { token: htmlTokenTypes.getTag('$1'), bracket: '@close' }],\n\n\t\t\t\t[/<!--/, 'comment', '@comment']\n\t\t\t],\n\n\t\t\tcomment: [\n\t\t\t\t[/[^<\\-]+/, 'comment.content'],\n\t\t\t\t[/-->/, 'comment', '@pop'],\n\t\t\t\t[/<!--/, 'comment.content.invalid'],\n\t\t\t\t[/[<\\-]/, 'comment.content']\n\t\t\t],\n\n\t\t\t// Almost full HTML tag matching, complete with embedded scripts & styles\n\t\t\ttag: [\n\t\t\t\t[/[ \\t\\r\\n]+/, 'white'],\n\t\t\t\t[/(type)(\\s*=\\s*)(\")([^\"]+)(\")/, [htmlTokenTypes.ATTRIB_NAME, htmlTokenTypes.DELIM_ASSIGN, htmlTokenTypes.ATTRIB_VALUE,\n\t\t\t\t\t{ token: htmlTokenTypes.ATTRIB_VALUE, switchTo: '@tag.$S2.$4' },\n\t\t\t\t\thtmlTokenTypes.ATTRIB_VALUE]],\n\t\t\t\t[/(type)(\\s*=\\s*)(')([^']+)(')/, [htmlTokenTypes.ATTRIB_NAME, htmlTokenTypes.DELIM_ASSIGN, htmlTokenTypes.ATTRIB_VALUE,\n\t\t\t\t\t{ token: htmlTokenTypes.ATTRIB_VALUE, switchTo: '@tag.$S2.$4' },\n\t\t\t\t\thtmlTokenTypes.ATTRIB_VALUE]],\n\t\t\t\t[/(\\w+)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, [htmlTokenTypes.ATTRIB_NAME, htmlTokenTypes.DELIM_ASSIGN, htmlTokenTypes.ATTRIB_VALUE]],\n\t\t\t\t[/\\w+/, htmlTokenTypes.ATTRIB_NAME],\n\t\t\t\t[/\\/>/, htmlTokenTypes.getTag('$S2'), '@pop'],\n\t\t\t\t[/>/, {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$S2==style': { token: htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: 'text/css' },\n\t\t\t\t\t\t'$S2==script': {\n\t\t\t\t\t\t\tcases: {\n\t\t\t\t\t\t\t\t'$S3': { token: htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: '$S3' },\n\t\t\t\t\t\t\t\t'@default': { token: htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: 'text/javascript' }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@default': { token: htmlTokenTypes.getTag('$S2'), next: '@pop' }\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t],\n\n\t\t\tembedded: [\n\t\t\t\t[/[^\"'<]+/, ''],\n\t\t\t\t[/<\\/(\\w+)\\s*>/, {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S2': { token: '@rematch', next: '@pop', nextEmbedded: '@pop' },\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],  // non-teminated string\n\t\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],  // non-teminated string\n\t\t\t\t[/\"/, 'string', '@string.\"'],\n\t\t\t\t[/'/, 'string', '@string.\\''],\n\t\t\t\t[/</, '']\n\t\t\t],\n\n\t\t\t// scan embedded strings in javascript or css\n\t\t\tstring: [\n\t\t\t\t[/[^\\\\\"']+/, 'string'],\n\t\t\t\t[/@jsescapes/, 'string.escape'],\n\t\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t\t[/[\"']/, {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S2': { token: 'string', next: '@pop' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t]\n\t\t}\n\t};\n\nexport class MarkdownMode extends AbstractMode {\n\n\tpublic static LANG_CONFIG: LanguageConfiguration = {\n\t\tcomments: {\n\t\t\tblockComment: ['<!--', '-->',]\n\t\t},\n\t\tbrackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],\n\t\tautoClosingPairs: []\n\t};\n\n\tpublic tokenizationSupport: Modes.ITokenizationSupport;\n\n\tconstructor(\n\t\tdescriptor: Modes.IModeDescriptor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IThreadService threadService: IThreadService,\n\t\t@IModeService modeService: IModeService,\n\t\t@IEditorWorkerService editorWorkerService: IEditorWorkerService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper(descriptor.id);\n\t\tlet lexer = Compile.compile(descriptor.id, language);\n\n\t\tthis.tokenizationSupport = createTokenizationSupport(modeService, this, lexer);\n\n\t\tLanguageConfigurationRegistry.register(this.getId(), MarkdownMode.LANG_CONFIG);\n\n\t\tModes.SuggestRegistry.register(this.getId(), {\n\t\t\ttriggerCharacters: [],\n\t\t\tshouldAutotriggerSuggest: false,\n\t\t\tprovideCompletionItems: (model, position, token) => {\n\t\t\t\treturn wireCancellationToken(token, editorWorkerService.textualSuggest(model.uri, position));\n\t\t\t}\n\t\t}, true);\n\t}\n}"]}